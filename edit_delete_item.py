"""
Edit/Delete Module - –ú–æ–¥—É–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
==================================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø –∏ —Ç.–¥.)
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π

–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:
1. –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
2. –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
3. –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä –ø–æ–ª—è –∏ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
4. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç States –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ
"""

import re
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging
from constants import States
from menu import back_to_menu_keyboard, menu, get_menu_keyboard
from database import get_stamp_id_by_action

logger = logging.getLogger(__name__)

async def show_edit_delete_menu_old(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """This function is now obsolete and will be removed in future versions."""
    return ConversationHandler.END

async def show_edit_delete_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - int: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (States.EDIT_DELETE_SELECT_ACTION –∏–ª–∏ ConversationHandler.END)

    –î–µ–π—Å—Ç–≤–∏—è:
    1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è
    3. –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
    4. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    """
    query = update.callback_query
    if query:
        await query.answer()
        if query.data == "back":
            # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
            current_menu = context.user_data.get('current_menu', 'main_menu')
            keyboard = get_menu_keyboard(current_menu)
            await query.message.edit_text(
                menu[current_menu]['text'],
                reply_markup=keyboard
            )
            return ConversationHandler.END
        else:
            action = query.data
            context.user_data['edit_action'] = action
    else:
        action = context.user_data.get('edit_action')

    if not action or not action.startswith('editdelete'):
        logger.error(f"Invalid action for edit/delete menu: {action}")
        return ConversationHandler.END

    current_menu = context.user_data.get('current_menu', 'main_menu')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="select_edit"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="select_delete")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")]
    ]

    message = query.message if query else update.message
    try:
        await message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception:
        await message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return States.EDIT_DELETE_SELECT_ACTION

async def handle_action_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ).

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - int: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (States.EDIT_DELETE_CHOOSING –∏–ª–∏ ConversationHandler.END)

    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ü–æ–ª—É—á–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback
    2. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ ID —à—Ç–∞–º–ø–∞
    3. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
    4. –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    """
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        current_menu = context.user_data.get('current_menu', 'main_menu')
        await query.message.edit_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=back_to_menu_keyboard(current_menu)
        )
        return ConversationHandler.END

    action = context.user_data.get('edit_action')
    if not action:
        await query.message.edit_text(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.",
            reply_markup=back_to_menu_keyboard('main_menu')
        )
        return ConversationHandler.END

    selected_action = query.data
    context.user_data['selected_action'] = selected_action

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º stamp_id
    category_match = re.match(r'^editdelete([a-z]+).*$', action)
    if not category_match:
        await query.message.edit_text(
            "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è.",
            reply_markup=back_to_menu_keyboard('main_menu')
        )
        return ConversationHandler.END

    category = category_match.group(1)
    stamp_id = await get_stamp_id_by_action(action)

    if not stamp_id:
        await query.message.edit_text(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à—Ç–∞–º–ø.",
            reply_markup=back_to_menu_keyboard('main_menu')
        )
        return ConversationHandler.END

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    table_mapping = {
        'punches': ('Punches', '–ü—É–∞–Ω—Å–æ–Ω—ã'),
        'inserts': ('Inserts', '–í—Å—Ç–∞–≤–∫–∏'),
        'stampparts': ('Parts', '–ó–∞–ø—á–∞—Å—Ç–∏'),
        'knives': ('Knives', '–ù–æ–∂–∏'),
        'cams': ('Clamps', '–ö—É–ª–∞—á–∫–∏'),
        'discparts': ('Disc_Parts', '–ó–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –¥–∏—Å–∫–æ–≤'),
        'pushers': ('Pushers', '–¢–æ–ª–∫–∞—Ç–µ–ª–∏')
    }

    table_info = table_mapping.get(category)
    if not table_info:
        await query.message.edit_text(
            "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è.",
            reply_markup=back_to_menu_keyboard('main_menu')
        )
        return ConversationHandler.END

    table_name, category_name = table_info
    context.user_data['edit_table'] = table_name

    try:
        db = context.application.db
        async with db.execute(
            f"SELECT * FROM {table_name} WHERE stamp_id = ?",
            (stamp_id,)
        ) as cursor:
            items = await cursor.fetchall()
            column_names = [description[0] for description in cursor.description]

        if not items:
            await query.message.edit_text(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=back_to_menu_keyboard('main_menu')
            )
            return ConversationHandler.END

        message_text = f"üìã –î–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}:\n\n"
        keyboard = []

        for item in items:
            item_dict = dict(zip(column_names, item))
            item_id = item_dict['id']

            item_text = f"üîπ {item_dict['name']}\n"
            if 'quantity' in item_dict:
                item_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_dict['quantity']}\n"
            if 'type' in item_dict and item_dict['type']:
                item_text += f"   –¢–∏–ø: {item_dict['type']}\n"
            if 'size' in item_dict and item_dict['size']:
                item_text += f"   –†–∞–∑–º–µ—Ä: {item_dict['size']}\n"
            if 'description' in item_dict and item_dict['description']:
                item_text += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {item_dict['description']}\n"

            message_text += f"\n{item_text}"

            if selected_action == "select_edit":
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å {item_dict['name']}",
                        callback_data=f"edit_{item_id}"
                    )
                ])
            else:  # select_delete
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóë –£–¥–∞–ª–∏—Ç—å {item_dict['name']}",
                        callback_data=f"delete_{item_id}"
                    )
                ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])

        await query.message.edit_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        return States.EDIT_DELETE_CHOOSING

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=back_to_menu_keyboard('main_menu')
        )
        return ConversationHandler.END

async def handle_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - int: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    2. –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    """
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        return await show_edit_delete_menu(update, context)

    try:
        table_name = context.user_data.get('edit_table')
        item_id = context.user_data.get('edit_item_id')

        if not all([table_name, item_id]):
            raise ValueError("Could not get data for deletion")

        db = context.application.db
        await db.execute(f"DELETE FROM {table_name} WHERE id = ?", (item_id,))
        await db.commit()

        current_menu = context.user_data.get('current_menu', 'main_menu')
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
        ]])

        await query.message.reply_text(
            "‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=keyboard
        )

        return States.EDIT_DELETE_CHOOSING

    except Exception as e:
        logger.exception("Error during deletion")
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
        ]])
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞.",
            reply_markup=keyboard
        )
        return States.EDIT_DELETE_CHOOSING

async def handle_edit_value(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - int: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    - –î–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    """
    if not update.message:
        return States.EDIT_ENTERING_VALUE

    try:
        new_value = update.message.text.strip()
        field = context.user_data.get('edit_field')
        table_name = context.user_data.get('edit_table')
        item_id = context.user_data.get('edit_item_id')

        if not all([field, table_name, item_id]):
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
            ]])
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=keyboard
            )
            return States.EDIT_DELETE_CHOOSING

        if field == 'quantity':
            try:
                new_value = int(new_value)
                if new_value < 0:
                    raise ValueError
            except ValueError:
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
                ]])
                await update.message.reply_text(
                    "–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
                    reply_markup=keyboard
                )
                return States.EDIT_ENTERING_VALUE

        db = context.application.db
        await db.execute(
            f"UPDATE {table_name} SET {field} = ? WHERE id = ?",
            (new_value, item_id)
        )
        await db.commit()

        current_menu = context.user_data.get('current_menu', 'main_menu')
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
        ]])

        await update.message.reply_text(
            "‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=keyboard
        )

        return States.EDIT_DELETE_CHOOSING

    except Exception as e:
        logger.exception("Error updating value")
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
        ]])
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è.",
            reply_markup=keyboard
        )
        return States.EDIT_DELETE_CHOOSING

async def handle_edit_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - int: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (States.EDIT_CHOOSING_FIELD –∏–ª–∏ States.DELETE_CONFIRM)

    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ü–æ–ª—É—á–∞–µ—Ç ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    2. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ)
    3. –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
    4. –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    """
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        return await show_edit_delete_menu(update, context)

    try:
        item_id = int(query.data.split('_')[1])
        action = 'edit' if query.data.startswith('edit_') else 'delete'
        context.user_data['edit_item_id'] = item_id
        context.user_data['edit_type'] = action

        table_name = context.user_data.get('edit_table')
        if not table_name:
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
                ]])
            )
            return States.EDIT_DELETE_CHOOSING

        db = context.application.db
        async with db.execute(
            f"SELECT * FROM {table_name} WHERE id = ?",
            (item_id,)
        ) as cursor:
            item = await cursor.fetchone()
            if not item:
                await query.message.reply_text(
                    "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
                    ]])
                )
                return States.EDIT_DELETE_CHOOSING

            column_names = [description[0] for description in cursor.description]
            item_dict = dict(zip(column_names, item))

            if action == 'edit':
                keyboard = []
                editable_fields = ['name', 'quantity', 'type', 'size', 'description']

                for field in editable_fields:
                    if field in item_dict:
                        current_value = item_dict[field] or '–ù–µ –∑–∞–¥–∞–Ω–æ'
                        keyboard.append([
                            InlineKeyboardButton(
                                f"–ò–∑–º–µ–Ω–∏—Ç—å {field} (—Ç–µ–∫—É—â–µ–µ: {current_value})",
                                callback_data=f"edit_field_{field}"
                            )
                        ])

                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")])

                await query.message.reply_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return States.EDIT_CHOOSING_FIELD

            else:  # delete
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="back")
                    ]
                ]

                await query.message.reply_text(
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {item_dict['name']}?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                return States.DELETE_CONFIRM

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
            ]])
        )
        return States.EDIT_DELETE_CHOOSING

async def handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - int: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (States.EDIT_ENTERING_VALUE)

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ç–∏–ø, —Ä–∞–∑–º–µ—Ä, –æ–ø–∏—Å–∞–Ω–∏–µ)
    """
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        return await show_edit_delete_menu(update, context)

    field = query.data.split('_')[2]
    context.user_data['edit_field'] = field

    field_descriptions = {
        'name': '–Ω–∞–∑–≤–∞–Ω–∏–µ',
        'quantity': '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)',
        'type': '—Ç–∏–ø',
        'size': '—Ä–∞–∑–º–µ—Ä',
        'description': '–æ–ø–∏—Å–∞–Ω–∏–µ'
    }

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
    ]])

    await query.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_descriptions.get(field, field)}:",
        reply_markup=keyboard
    )

    return States.EDIT_ENTERING_VALUE

async def handle_exit_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã—Ö–æ–¥–∞ –ø—Ä–∏ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - int: –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ (ConversationHandler.END)

    –î–µ–π—Å—Ç–≤–∏—è:
    1. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
    2. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—ã—Ö–æ–¥–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –æ—Ç–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    3. –í –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
    """
    query = update.callback_query
    await query.answer()

    if query.data == "save_exit":
        try:
            field = context.user_data.get('edit_field')
            new_value = context.user_data.get('new_value')
            table_name = context.user_data.get('edit_table')
            item_id = context.user_data.get('edit_item_id')

            if all([field, new_value, table_name, item_id]):
                db = context.application.db
                await db.execute(
                    f"UPDATE {table_name} SET {field} = ? WHERE id = ?",
                    (new_value, item_id)
                )
                await db.commit()

                await query.message.reply_text(
                    "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
                    ]])
                )

            return ConversationHandler.END

        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
                ]])
            )
            return ConversationHandler.END

    elif query.data == "exit_without_save":
        await query.message.reply_text(
            "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")
            ]])
        )
        return ConversationHandler.END

    return ConversationHandler.END