"""
Drawings Module - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞–º–∏
=======================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä—Ç–µ–∂–∞–º–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ.
–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö —á–µ—Ä—Ç–µ–∂–µ–π
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–µ—Ä—Ç–µ–∂–µ–π
- –ü–æ–∏—Å–∫ —á–µ—Ä—Ç–µ–∂–µ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä—Ç–µ–∂–µ–π
- –ü—Ä–∏–≤—è–∑–∫–∞ —á–µ—Ä—Ç–µ–∂–µ–π –∫ —à—Ç–∞–º–ø–∞–º

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–µ–π
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
- –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º
"""

import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, filters
from database import get_connection, get_stamp_id_by_action
from menu import back_to_menu_keyboard
from constants import States

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

async def show_drawings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - States.DRAWINGS_MENU: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π

    –î–µ–π—Å—Ç–≤–∏—è:
    1. –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞–º–∏
    2. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –ø–æ–∏—Å–∫–∞
    3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é
    """
    query = update.callback_query
    await query.answer()

    logger.info("–í—Ö–æ–¥ –≤ –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π")

    keyboard = [
        [InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä—Ç—ë–∂", callback_data="upload_drawing")],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="view_drawings")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="search_drawings")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]

    try:
        await query.message.edit_text(
            "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞–º–∏:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info("–ú–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
        return States.DRAWINGS_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π: {e}", exc_info=True)
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")
            ]])
        )
        return ConversationHandler.END

async def start_drawing_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()

    logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä—Ç–µ–∂–∞")
    conn = None

    try:
        conn = get_connection()
        cursor = conn.cursor()

        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à—Ç–∞–º–ø–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        cursor.execute("SELECT id, name FROM Stamps ORDER BY name")
        stamps = cursor.fetchall()

        if not stamps:
            logger.warning("–°–ø–∏—Å–æ–∫ —à—Ç–∞–º–ø–æ–≤ –ø—É—Å—Ç")
            await query.message.edit_text(
                "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ç–∞–º–ø–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")
                ]])
            )
            return States.DRAWINGS_MENU

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —à—Ç–∞–º–ø–æ–≤: {len(stamps)}")
        keyboard = []
        for stamp_id, stamp_name in stamps:
            keyboard.append([InlineKeyboardButton(
                stamp_name, 
                callback_data=f"upload_for_stamp_{stamp_id}"
            )])
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —à—Ç–∞–º–ø–∞: {stamp_name} (ID: {stamp_id})")

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")])

        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ç–∞–º–ø, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —á–µ—Ä—Ç—ë–∂:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info("–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à—Ç–∞–º–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
        return States.UPLOADING_DRAWING_STAMP

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à—Ç–∞–º–ø–æ–≤: {e}", exc_info=True)
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —à—Ç–∞–º–ø–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")
            ]])
        )
        return States.DRAWINGS_MENU
    finally:
        if conn:
            logger.debug("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
            conn.close()

async def handle_drawing_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä—Ç–µ–∂–∞ –∏–ª–∏ –≤—ã–±–æ—Ä —à—Ç–∞–º–ø–∞"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ handle_drawing_file")

        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        if update.message and update.message.document:
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
            file = update.message.document
            file_name = file.file_name

            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name}")

            stamp_id = context.user_data.get('selected_stamp_id')
            logger.info(f"–ù–∞–π–¥–µ–Ω stamp_id –≤ context.user_data: {stamp_id}")

            if not stamp_id:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω selected_stamp_id –≤ context.user_data")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —à—Ç–∞–º–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –í –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="back_to_drawings")
                    ]])
                )
                return States.DRAWINGS_MENU

            try:
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É drawings, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                os.makedirs('drawings', exist_ok=True)
                logger.info("–ü–∞–ø–∫–∞ drawings —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                new_file = await file.get_file()
                file_path = f"drawings/{stamp_id}_{file_name}"
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏: {file_path}")

                await new_file.download_to_drive(file_path)
                logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                conn = get_connection()
                cursor = conn.cursor()

                try:
                    cursor.execute("""
                        INSERT INTO Drawings (stamp_id, name, file_type, file_path, description)
                        VALUES (?, ?, ?, ?, ?)
                    """, (stamp_id, file_name, os.path.splitext(file_name)[1].lower(), file_path, ""))
                    conn.commit()
                    logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

                    await update.message.reply_text(
                        "‚úÖ –ß–µ—Ä—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –í –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="back_to_drawings")
                        ]])
                    )
                    return States.DRAWINGS_MENU

                except Exception as db_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_error}", exc_info=True)
                    raise
                finally:
                    if conn:
                        conn.close()

            except Exception as save_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {save_error}", exc_info=True)
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –í –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="back_to_drawings")
                    ]])
                )
                return States.DRAWINGS_MENU

        # –ï—Å–ª–∏ —ç—Ç–æ callback query (–≤—ã–±–æ—Ä —à—Ç–∞–º–ø–∞)
        elif update.callback_query:
            query = update.callback_query
            await query.answer()
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query: {query.data}")

            try:
                stamp_id = int(query.data.split('_')[-1])
                context.user_data['selected_stamp_id'] = stamp_id
                logger.info(f"–í—ã–±—Ä–∞–Ω —à—Ç–∞–º–ø —Å ID: {stamp_id}")

                conn = get_connection()
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM Stamps WHERE id = ?", (stamp_id,))
                result = cursor.fetchone()

                if not result:
                    logger.error(f"–®—Ç–∞–º–ø —Å ID {stamp_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                    raise ValueError(f"–®—Ç–∞–º–ø —Å ID {stamp_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                stamp_name = result[0]
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞–º–ø–∞: {stamp_name}")

                await query.message.edit_text(
                    f"–í—ã–±—Ä–∞–Ω —à—Ç–∞–º–ø: {stamp_name}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä—Ç–µ–∂–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")
                    ]])
                )
                return States.UPLOADING_DRAWING_FILE

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —à—Ç–∞–º–ø–∞: {e}", exc_info=True)
                await query.message.edit_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —à—Ç–∞–º–ø–∞.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")
                    ]])
                )
                return States.DRAWINGS_MENU
            finally:
                if 'conn' in locals():
                    conn.close()

        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            return States.DRAWINGS_MENU

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_drawing_file: {e}", exc_info=True)
        if update.callback_query:
            await update.callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="back_to_drawings")
                ]])
            )
        elif update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="back_to_drawings")
                ]])
            )
        return States.DRAWINGS_MENU

async def view_drawings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–µ—Ä—Ç–µ–∂–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞"""
    query = update.callback_query
    await query.answer()

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM Stamps ORDER BY name")
    stamps = cursor.fetchall()
    conn.close()

    keyboard = []
    for stamp_id, stamp_name in stamps:
        keyboard.append([InlineKeyboardButton(
            stamp_name, 
            callback_data=f"view_drawings_stamp_{stamp_id}"
        )])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ç–∞–º–ø –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ—Ä—Ç–µ–∂–µ–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.VIEWING_DRAWINGS

async def show_stamp_drawings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–µ—Ä—Ç–µ–∂–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞"""
    query = update.callback_query
    await query.answer()

    stamp_id = int(query.data.split('_')[-1])

    conn = get_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ç–∞–º–ø–∞
        cursor.execute("SELECT name FROM Stamps WHERE id = ?", (stamp_id,))
        stamp_name = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–µ—Ä—Ç–µ–∂–µ–π
        cursor.execute("""
            SELECT id, name, file_type, file_path, description, version
            FROM Drawings
            WHERE stamp_id = ?
            ORDER BY name
        """, (stamp_id,))

        drawings = cursor.fetchall()

        if not drawings:
            message = f"–î–ª—è —à—Ç–∞–º–ø–∞ {stamp_name} –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–µ—Ä—Ç–µ–∂–µ–π."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —à—Ç–∞–º–ø–æ–≤", callback_data="view_drawings")]]
        else:
            message = f"–ß–µ—Ä—Ç–µ–∂–∏ –¥–ª—è —à—Ç–∞–º–ø–∞ {stamp_name}:\n\n"
            keyboard = []

            for drawing_id, name, file_type, _, description, version in drawings:
                message += f"üìÑ {name}"
                if version:
                    message += f" (–í–µ—Ä—Å–∏—è: {version})"
                message += f"\n–¢–∏–ø: {file_type}"
                if description:
                    message += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                message += "\n\n"

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞
                keyboard.append([
                    InlineKeyboardButton(f"üì• –°–∫–∞—á–∞—Ç—å {name}", callback_data=f"download_drawing_{drawing_id}"),
                    InlineKeyboardButton(f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä {name}", callback_data=f"preview_drawing_{drawing_id}")
                ])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —à—Ç–∞–º–ø–æ–≤", callback_data="view_drawings")])

        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.VIEWING_DRAWINGS

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–µ—Ä—Ç–µ–∂–µ–π: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —à—Ç–∞–º–ø–æ–≤", callback_data="view_drawings")]]
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–µ—Ä—Ç–µ–∂–µ–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.VIEWING_DRAWINGS
    finally:
        conn.close()

async def search_drawings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —á–µ—Ä—Ç–µ–∂–µ–π"""
    query = update.callback_query
    await query.answer()

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")]]

    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä—Ç–µ–∂–µ–π:\n"
        "(–ø–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é)",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.SEARCHING_DRAWINGS

async def handle_drawing_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —á–µ—Ä—Ç–µ–∂–µ–π"""
    if not update.message or not update.message.text:
        return States.SEARCHING_DRAWINGS

    search_query = update.message.text.strip()

    conn = get_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ–∏—Å–∫ —á–µ—Ä—Ç–µ–∂–µ–π
        cursor.execute("""
            SELECT d.name, d.file_type, s.name as stamp_name
            FROM Drawings d
            JOIN Stamps s ON s.id = d.stamp_id
            WHERE d.name LIKE ? OR d.description LIKE ?
            ORDER BY d.name
        """, (f"%{search_query}%", f"%{search_query}%"))

        results = cursor.fetchall()

        if not results:
            message = f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        else:
            message = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}':\n\n"
            for name, file_type, stamp_name in results:
                message += f"üìÑ {name}\n"
                message += f"–¢–∏–ø: {file_type}\n"
                message += f"–®—Ç–∞–º–ø: {stamp_name}\n\n"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")]]

        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.DRAWINGS_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä—Ç–µ–∂–µ–π: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")]]
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä—Ç–µ–∂–µ–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.DRAWINGS_MENU
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_to_drawings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π"""
    query = update.callback_query
    if not query:
        return States.DRAWINGS_MENU

    await query.answer()
    logger.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π")

    keyboard = [
        [InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä—Ç—ë–∂", callback_data="upload_drawing")],
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="view_drawings")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="search_drawings")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
    ]

    await query.message.edit_text(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä—Ç–µ–∂–∞–º–∏:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.DRAWINGS_MENU

async def download_drawing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —á–µ—Ä—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    query = update.callback_query
    await query.answer()

    drawing_id = int(query.data.split('_')[-1])

    conn = get_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            SELECT d.file_path, d.name, s.name as stamp_name, s.id as stamp_id
            FROM Drawings d
            JOIN Stamps s ON s.id = d.stamp_id
            WHERE d.id = ?
        """, (drawing_id,))

        result = cursor.fetchone()
        if not result:
            await query.message.reply_text("‚ùå –ß–µ—Ä—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return States.VIEWING_DRAWINGS

        file_path, drawing_name, stamp_name, stamp_id = result

        if not os.path.exists(file_path):
            await query.message.reply_text("‚ùå –§–∞–π–ª —á–µ—Ä—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            return States.VIEWING_DRAWINGS

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(file_path, 'rb') as file:
            await query.message.reply_document(
                document=file,
                filename=drawing_name,
                caption=f"–ß–µ—Ä—Ç—ë–∂ –¥–ª—è —à—Ç–∞–º–ø–∞ {stamp_name}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —á–µ—Ä—Ç–µ–∂–µ–π", callback_data=f"view_drawings_stamp_{stamp_id}")],
                    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="back_to_drawings")]
                ])
            )
        return States.VIEWING_DRAWINGS

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —á–µ—Ä—Ç–µ–∂–∞: {e}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —á–µ—Ä—Ç–µ–∂–∞.")
        return States.VIEWING_DRAWINGS
    finally:
        conn.close()

async def preview_drawing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —á–µ—Ä—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()

    try:
        drawing_id = int(query.data.split('_')[-1])
        logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –¥–ª—è —á–µ—Ä—Ç–µ–∂–∞ —Å ID: {drawing_id}")

        conn = get_connection()
        cursor = conn.cursor()

        try:
            cursor.execute("""
                SELECT d.file_path, d.name, d.file_type, s.name as stamp_name, s.id as stamp_id, d.description
                FROM Drawings d
                JOIN Stamps s ON s.id = d.stamp_id
                WHERE d.id = ?
            """, (drawing_id,))

            result = cursor.fetchone()
            if not result:
                logger.warning(f"–ß–µ—Ä—Ç—ë–∂ —Å ID {drawing_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                await query.message.edit_text(
                    "‚ùå –ß–µ—Ä—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")
                    ]])
                )
                return States.DRAWINGS_MENU

            file_path, drawing_name, file_type, stamp_name, stamp_id, description = result
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ—Ä—Ç–µ–∂–∞: {drawing_name}, —à—Ç–∞–º–ø: {stamp_name}")

            if not os.path.exists(file_path):
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")
                await query.message.edit_text(
                    "‚ùå –§–∞–π–ª —á–µ—Ä—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")
                    ]])
                )
                return States.DRAWINGS_MENU

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ—Ä—Ç–µ–∂–µ
            message = (
                f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ—Ä—Ç–µ–∂–µ\n\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {drawing_name}\n"
                f"–¢–∏–ø —Ñ–∞–π–ª–∞: {file_type}\n"
                f"–®—Ç–∞–º–ø: {stamp_name}"
            )
            if description:
                message += f"\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"

            keyboard = [
                [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"download_drawing_{drawing_id}")],
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —á–µ—Ä—Ç–µ–∂–µ–π", callback_data=f"view_drawings_stamp_{stamp_id}")],
                [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä—Ç–µ–∂–µ–π", callback_data="back_to_drawings")]
            ]

            await query.message.edit_text(
                message,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            logger.info("–ü—Ä–µ–≤—å—é —á–µ—Ä—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
            return States.DRAWINGS_MENU

        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {db_error}", exc_info=True)
            raise
        finally:
            if conn:
                conn.close()

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ —á–µ—Ä—Ç–µ–∂–∞: {e}", exc_info=True)
        try:
            await query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ —á–µ—Ä—Ç–µ–∂–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")
                ]])
            )
        except Exception as edit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}", exc_info=True)
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ —á–µ—Ä—Ç–µ–∂–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_drawings")
                ]])
            )
        return States.DRAWINGS_MENU