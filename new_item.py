from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)
from telegram.constants import ParseMode
from database import get_stamp_id_by_action
from menu import menu, create_inventory_submenus, inventory_list, get_menu_keyboard, back_to_menu_keyboard
import logging
import re
import sqlite3
from urllib.parse import urlparse
import validators
from constants import States

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

async def invalid_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
    )
    return States.ADD_ENTERING_DATA

async def add_new_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info("add_new_item called")
    try:
        query = update.callback_query
        await query.answer()
        logger.info("Callback query answered.")

        action = query.data  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
        logger.info(f"Action received: {action}")
        context.user_data['action'] = action  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –º–µ–Ω—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if 'menu_path' not in context.user_data:
            context.user_data['menu_path'] = ['main_menu']
        current_menu = context.user_data.get('current_menu', 'main_menu')
        context.user_data['menu_path'].append(current_menu)

        logger.info(f"Current menu path: {context.user_data['menu_path']}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        logger.info(f"Current menu: {current_menu}")

        # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ action
        category_prefixes = {
            'punches': 'addnewitempunches',
            'inserts': 'addnewiteminserts',
            'stampparts': 'addnewitemstampparts',
            'knives': 'addnewitemknives',
            'cams': 'addnewitemcams',
            'discparts': 'addnewitemdiscparts',
            'pushers': 'addnewitempushers',
        }

        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é action
        category = None
        inv_id = None
        for cat, prefix in category_prefixes.items():
            if action.startswith(prefix):
                category = cat
                inv_id = action[len(prefix):]  # –ò–∑–≤–ª–µ–∫–∞–µ–º inv_id –∏–∑ action
                logger.info(f"Category determined: {category}, inv_id: {inv_id}")
                break

        if category is None:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            logger.warning(f"Unknown action: {action}")
            await query.message.reply_text(
                "üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=back_to_menu_keyboard(current_menu)
            )
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ inv_id –≤ context.user_data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['adding_category'] = category
        context.user_data['inv_id'] = inv_id

        # –®–∞–±–ª–æ–Ω –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        instruction_template = (
            "üì• **–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:**\n\n"
            "`{fields}`\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n""`{example}`"
        )

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")]
        ]

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if category == 'punches':
            fields = "–ò–º—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¢–∏–ø(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –†–∞–∑–º–µ—Ä (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            example = "–ü—É–∞–Ω—Å–æ–Ω A, 10, –¢–∏–ø B, –†–∞–∑–º–µ—Ä C, https://image.url, –û–ø–∏—Å–∞–Ω–∏–µ"
        elif category == 'inserts':
            fields = "–ò–º—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –†–∞–∑–º–µ—Ä(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –û–ø–∏—Å–∞–Ω–∏–µ(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            example = "–í—Å—Ç–∞–≤–∫–∞ A, 5, –†–∞–∑–º–µ—Ä B, –û–ø–∏—Å–∞–Ω–∏–µ"
        elif category == 'stampparts':
            fields = "–ò–º—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –û–ø–∏—Å–∞–Ω–∏–µ(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            example = "–ó–∞–ø—á–∞—Å—Ç—å A, 3, –û–ø–∏—Å–∞–Ω–∏–µ"
        elif category == 'knives':
            fields = "–ò–º—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –†–∞–∑–º–µ—Ä(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –û–ø–∏—Å–∞–Ω–∏–µ(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            example = "–ù–æ–∂ A, 7, –†–∞–∑–º–µ—Ä B, –û–ø–∏—Å–∞–Ω–∏–µ"
        elif category == 'cams':
            fields = "–ò–º—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –û–ø–∏—Å–∞–Ω–∏–µ(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            example = "–ö—É–ª–∞—á–æ–∫ A, 15, –û–ø–∏—Å–∞–Ω–∏–µ"
        elif category == 'discparts':
            fields = "–ò–º—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –û–ø–∏—Å–∞–Ω–∏–µ(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            example = "–ó–∞–ø—á–∞—Å—Ç—å –¥–ª—è –¥–∏—Å–∫–∞ A, 20, –û–ø–∏—Å–∞–Ω–∏–µ"
        elif category == 'pushers':
            fields = "–ò–º—è, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –†–∞–∑–º–µ—Ä(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –û–ø–∏—Å–∞–Ω–∏–µ(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
            example = "–¢–æ–ª–∫–∞—Ç–µ–ª—å A, 8, –†–∞–∑–º–µ—Ä B, –û–ø–∏—Å–∞–Ω–∏–µ"
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            logger.warning(f"Unknown category: {category}")
            await query.message.reply_text(
                "üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=back_to_menu_keyboard(current_menu)
            )
            return ConversationHandler.END

        await query.message.reply_text(
            instruction_template.format(fields=fields, example=example),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        logger.info(f"Sent message for {category}.")

        return States.ADD_ENTERING_DATA

    except Exception as e:
        logger.exception("Exception in add_new_item")
        if 'query' in locals():
            await query.message.reply_text(
                "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_menu_keyboard(current_menu)
            )
        return ConversationHandler.END

MAX_NAME_LENGTH = 100
MAX_SIZE_LENGTH = 50
MAX_DESCRIPTION_LENGTH = 500
MAX_TYPE_LENGTH = 50
MAX_URL_LENGTH = 2000
MAX_QUANTITY = 10000

NAME_PATTERN = re.compile(r"^[A-Za-z–ê-–Ø–∞-—è0-9\s\-_,\.]+$")

def get_category_table_name(category):
    category_tables = {
        'punches': 'Punches',
        'inserts': 'Inserts',
        'stampparts': 'Parts',
        'knives': 'Knives',
        'cams': 'Clamps',
        'discparts': 'Disc_Parts',
        'pushers': 'Pushers'
    }
    return category_tables.get(category)

async def handle_new_item_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback query
    if update.callback_query:
        query = update.callback_query
        await query.answer()

        if query.data == 'go_back':
            await query.message.reply_text(
                "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=back_to_menu_keyboard(context.user_data.get('current_menu', 'main_menu'))
            )
            return ConversationHandler.END

        return States.ADD_ENTERING_DATA

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    if not update.message or not update.message.text:
        return States.ADD_ENTERING_DATA

    user_input = update.message.text.strip()
    category = context.user_data.get('adding_category')
    current_menu = context.user_data.get('current_menu')
    action = context.user_data.get('action')
    back_button = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])

    if not user_input:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=back_button
        )
        return States.ADD_ENTERING_DATA

    if not category:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        return ConversationHandler.END

    data = [item.strip() for item in user_input.split(',')]

    if len(data) < 2:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º *–ò–º—è* –∏ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ*.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_button
        )
        return States.ADD_ENTERING_DATA

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è
    name = data[0].strip().capitalize()
    quantity_str = data[1].strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    if len(name) > MAX_NAME_LENGTH:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞: –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å {MAX_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=back_button
        )
        return States.ADD_ENTERING_DATA

    if not NAME_PATTERN.match(name):
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.",
            reply_markup=back_button
        )
        return States.ADD_ENTERING_DATA

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    try:
        quantity = int(quantity_str)
        if quantity < 0 or quantity > MAX_QUANTITY:
            raise ValueError
    except ValueError:
        await update.message.reply_text(
            f"–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ {MAX_QUANTITY}.",
            reply_markup=back_button
        )
        return States.ADD_ENTERING_DATA

    # –ü–æ–ª—É—á–∞–µ–º stamp_id
    stamp_id = await get_stamp_id_by_action(action)
    if not stamp_id:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à—Ç–∞–º–ø.",
            reply_markup=back_to_menu_keyboard(current_menu)
        )
        return ConversationHandler.END

    db = context.application.db
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
    category_table = get_category_table_name(category)
    if not category_table:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=back_to_menu_keyboard(current_menu)
        )
        return ConversationHandler.END

    try:
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        if category == 'punches':
            type_ = data[2].strip() if len(data) > 2 else ''
            size = data[3].strip() if len(data) > 3 else ''
            image_url = data[4].strip() if len(data) > 4 else ''
            description = data[5].strip() if len(data) > 5 else ''

            await db.execute(
                "INSERT INTO Punches (stamp_id, name, quantity, type, size, image_url, description, last_modified) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now', '+3 hours'))",
                (stamp_id, name, quantity, type_, size, image_url, description)
            )
            await db.commit()
            category_name = '–ü—É–∞–Ω—Å–æ–Ω'

        elif category == 'inserts':
            size = data[2].strip() if len(data) > 2 else ''
            description = data[3].strip() if len(data) > 3 else ''

            await db.execute(
                "INSERT INTO Inserts (stamp_id, name, quantity, size, description, last_modified) VALUES (?, ?, ?, ?, ?, datetime('now', '+3 hours'))",
                (stamp_id, name, quantity, size, description)
            )
            await db.commit()
            category_name = '–í—Å—Ç–∞–≤–∫–∞'

        elif category == 'stampparts':
            description = data[2].strip() if len(data) > 2 else ''

            await db.execute(
                "INSERT INTO Parts (stamp_id, name, quantity, description, last_modified) VALUES (?, ?, ?, ?, datetime('now', '+3 hours'))",
                (stamp_id, name, quantity, description)
            )
            await db.commit()
            category_name = '–ó–∞–ø—á–∞—Å—Ç—å'

        elif category == 'knives':
            size = data[2].strip() if len(data) > 2 else ''
            description = data[3].strip() if len(data) > 3 else ''

            await db.execute(
                "INSERT INTO Knives (stamp_id, name, quantity, size, description, last_modified) VALUES (?, ?, ?, ?, ?, datetime('now', '+3 hours'))",
                (stamp_id, name, quantity, size, description)
            )
            await db.commit()
            category_name = '–ù–æ–∂'

        elif category == 'cams':
            description = data[2].strip() if len(data) > 2 else ''

            await db.execute(
                "INSERT INTO Clamps (stamp_id, name, quantity, description, last_modified) VALUES (?, ?, ?, ?, datetime('now', '+3 hours'))",
                (stamp_id, name, quantity, description)
            )
            await db.commit()
            category_name = '–ö—É–ª–∞—á–æ–∫'

        elif category == 'discparts':
            description = data[2].strip() if len(data) > 2 else ''

            await db.execute(
                "INSERT INTO Disc_Parts (stamp_id, name, quantity, description, last_modified) VALUES (?, ?, ?, ?, datetime('now', '+3 hours'))",
                (stamp_id, name, quantity, description)
            )
            await db.commit()
            category_name = '–ó–∞–ø—á–∞—Å—Ç—å –¥–ª—è –¥–∏—Å–∫–æ–≤–æ–≥–æ —à—Ç–∞–º–ø–∞'

        elif category == 'pushers':
            size = data[2].strip() if len(data) > 2 else ''
            description = data[3].strip() if len(data) > 3 else ''

            await db.execute(
                "INSERT INTO Pushers (stamp_id, name, quantity, size, description, last_modified) VALUES (?, ?, ?, ?, ?, datetime('now', '+3 hours'))",
                (stamp_id, name, quantity, size, description)
            )
            await db.commit()
            category_name = '–¢–æ–ª–∫–∞—Ç–µ–ª—å'

        else:
            await update.message.reply_text(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ."
            )
            return ConversationHandler.END

        await update.message.reply_text(
            f"‚úÖ –ù–æ–≤—ã–π {category_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=back_to_menu_keyboard(current_menu)
        )
        return ConversationHandler.END

    except Exception as e:
        logger.exception("Exception during database insertion")
        await update.message.reply_text(
            "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_keyboard(current_menu)
        )
        return ConversationHandler.END


async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é –∏–∑ –ø—É—Ç–∏
    menu_path = context.user_data.get('menu_path', ['main_menu'])
    if len(menu_path) > 0:
        menu_path.pop()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
        previous_menu = menu_path[-1] if menu_path else 'main_menu'
        context.user_data['current_menu'] = previous_menu
    else:
        previous_menu = 'main_menu'

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ–Ω—é
    keyboard = get_menu_keyboard(previous_menu)
    await query.message.edit_text(
        text=menu[previous_menu]['text'],
        reply_markup=keyboard
    )
    return ConversationHandler.END