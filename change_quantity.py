from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, error as telegram_error
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
)
import re
import logging
from menu import menu, create_inventory_submenus, inventory_list, get_menu_keyboard, back_to_menu_keyboard
from database import get_stamp_id_by_action
from showballance import show_balance
from constants import States

logger = logging.getLogger(__name__)

def get_adjust_quantity_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("+1", callback_data='adjust_quantity:+1'),
            InlineKeyboardButton("-1", callback_data='adjust_quantity:-1'),
        ],
        [
            InlineKeyboardButton("+10", callback_data='adjust_quantity:+10'),
            InlineKeyboardButton("-10", callback_data='adjust_quantity:-10'),
        ],
        [
            InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data='done_adjustment'),
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back'),
        ],
    ])

async def get_items_in_category(db, item_type, stamp_id):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ item_type
    table_mapping = {
        'punches': 'Punches',
        'inserts': 'Inserts',
        'stampparts': 'Parts',
        'knives': 'Knives',
        'cams': 'Clamps',
        'discparts': 'Disc_Parts',
        'pushers': 'Pushers',
    }

    table = table_mapping.get(item_type)
    if not table:
        logger.error(f"Unknown item type: {item_type}")
        return []

    try:
        async with db.execute(
            f"SELECT name, id FROM {table} WHERE stamp_id = ?",
            (stamp_id,)
        ) as cursor:
            results = await cursor.fetchall()
            items = [{'name': row[0], 'id': row[1]} for row in results]
            return items
    except Exception as e:
        logger.exception(f"Error fetching items: {e}")
        return []

async def change_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> States:
    query = update.callback_query
    await query.answer()
    callback_data = query.data
    logger.info(f"Change quantity callback data: {callback_data}")

    match = re.match(r'^changequantity([a-z]+)([\w_]+)$', callback_data)
    if match:
        item_type = match.group(1)
        inv_id = match.group(2)
        logger.info(f"Extracted item_type: {item_type}, inv_id: {inv_id}")

        context.user_data['item_type'] = item_type
        context.user_data['inv_id'] = inv_id
        context.user_data['action'] = callback_data

        # –ü–æ–ª—É—á–∞–µ–º stamp_id –ø–æ action
        stamp_id = await get_stamp_id_by_action(callback_data)
        if not stamp_id:
            await query.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à—Ç–∞–º–ø.",
                reply_markup=back_to_menu_keyboard(context.user_data.get('current_menu', 'main_menu'))
            )
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        items = await get_items_in_category(context.application.db, item_type, stamp_id)
        logger.info(f"Retrieved items: {items}")

        if not items:
            await query.message.reply_text(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
            )
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        keyboard = []
        for item in items:
            callback_data = f"item_{item['id']}"  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç callback_data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç pattern –≤ ConversationHandler
            logger.info(f"Creating button with callback_data: {callback_data}")
            keyboard.append([InlineKeyboardButton(item['name'], callback_data=callback_data)])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')])

        logger.info(f"Created keyboard with {len(keyboard)} buttons")

        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.CHANGE_QTY_CHOOSING_ITEM
    else:
        logger.warning(f"Invalid callback data format: {callback_data}")
        await query.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=back_to_menu_keyboard('main_menu')
        )
        return ConversationHandler.END

async def item_name_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    if not query:
        logger.warning("Received message instead of callback query")
        return ConversationHandler.END

    await query.answer()
    callback_data = query.data
    logger.info(f"Item selection callback data received: {callback_data}")

    if callback_data == 'go_back':
        await query.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=back_to_menu_keyboard(context.user_data.get('current_menu', 'main_menu'))
        )
        return ConversationHandler.END

    try:
        if not callback_data.startswith('item_'):
            logger.warning(f"Invalid callback data format: {callback_data}")
            await query.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
            )
            return States.CHANGE_QTY_CHOOSING_ITEM

        item_id = int(callback_data.replace('item_', ''))
        logger.info(f"Successfully parsed item_id: {item_id}")

        item_type = context.user_data.get('item_type')
        inv_id = context.user_data.get('inv_id')
        action = context.user_data.get('action')

        logger.info(f"Processing item_id: {item_id}, type: {item_type}, inv_id: {inv_id}")

        if not all([item_type, inv_id, action]):
            logger.error(f"Missing context data. item_type: {item_type}, inv_id: {inv_id}, action: {action}")
            await query.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
            )
            return ConversationHandler.END

        # Get stamp_id from action
        stamp_id = await get_stamp_id_by_action(action)
        if not stamp_id:
            logger.error(f"Could not get stamp_id for action: {action}")
            await query.message.reply_text(
                "–®—Ç–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
            )
            return ConversationHandler.END

        # Define table based on item_type
        table_mapping = {
            'punches': 'Punches',
            'inserts': 'Inserts',
            'stampparts': 'Parts',
            'knives': 'Knives',
            'cams': 'Clamps',
            'discparts': 'Disc_Parts',
            'pushers': 'Pushers',
        }
        table = table_mapping.get(item_type)

        if not table:
            logger.error(f"Unknown item_type: {item_type}")
            await query.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
            )
            return ConversationHandler.END

        db = context.application.db
        # Get current quantity from database
        try:
            async with db.execute(
                f"SELECT name, quantity FROM {table} WHERE id = ? AND stamp_id = ?",
                (item_id, stamp_id)
            ) as cursor:
                result = await cursor.fetchone()
                if result:
                    item_name, current_quantity = result
                    logger.info(f"Retrieved item: {item_name}, quantity: {current_quantity}")
                else:
                    logger.warning(f"No item found with id {item_id} in table {table}")
                    await query.message.reply_text(
                        "–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
                    )
                    return States.CHANGE_QTY_CHOOSING_ITEM
        except Exception as e:
            logger.exception("Database error: %s", e)
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
            )
            return ConversationHandler.END

        # Save item data in context
        context.user_data.update({
            'selected_item_name': item_name,
            'current_quantity': current_quantity,
            'new_quantity': current_quantity,
            'changes_saved': False,
            'state': States.CHANGE_QTY_ADJUSTING_QUANTITY
        })

        # Create keyboard for quantity adjustment
        keyboard = get_adjust_quantity_keyboard()

        await query.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {item_name}: {current_quantity}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )

        return States.CHANGE_QTY_ADJUSTING_QUANTITY
    except ValueError as e:
        logger.error(f"Value error while parsing item_id from callback_data {callback_data}: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='go_back')]])
        )
        return States.CHANGE_QTY_CHOOSING_ITEM
    except Exception as e:
        logger.exception(f"Unexpected error in item_name_received: {e}")
        await query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_menu_keyboard(context.user_data.get('current_menu', 'main_menu'))
        )
        return ConversationHandler.END

async def adjust_quantity_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    data = query.data  # –ù–∞–ø—Ä–∏–º–µ—Ä, 'adjust_quantity:+1'
    logger.info(f"Callback data received: {data}")
    logger.info(f"Context user_data: {context.user_data}")

    pattern = r'^adjust_quantity:([+-]\d+)$'
    match = re.match(pattern, data)

    if not match:
        await query.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")
        return States.CHANGE_QTY_ADJUSTING_QUANTITY

    adjustment_str = match.group(1)
    adjustment = int(adjustment_str)

    item_name = context.user_data.get('selected_item_name')
    new_quantity = context.user_data.get('new_quantity')
    item_type = context.user_data.get('item_type')
    action = context.user_data.get('action')

    if item_name is None or new_quantity is None or item_type is None or action is None:
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ.")
        return ConversationHandler.END

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º new_quantity –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    new_quantity = int(new_quantity)

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    new_quantity += adjustment
    if new_quantity < 0:
        new_quantity = 0
    context.user_data['new_quantity'] = new_quantity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    keyboard = get_adjust_quantity_keyboard()

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"Updating message for item {item_name} with new quantity: {new_quantity}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await query.edit_message_text(
            text=f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {item_name}: {new_quantity}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
        )
    except telegram_error.BadRequest as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return States.CHANGE_QTY_ADJUSTING_QUANTITY
    except Exception as e:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s", e)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        return States.CHANGE_QTY_ADJUSTING_QUANTITY

    return States.CHANGE_QTY_ADJUSTING_QUANTITY  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def done_adjustment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if context.user_data.get('changes_saved'):
        await query.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'.")
        return States.CHANGE_QTY_ADJUSTING_QUANTITY  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    item_name = context.user_data.get('selected_item_name')
    new_quantity = context.user_data.get('new_quantity')
    item_type = context.user_data.get('item_type')
    action = context.user_data.get('action')
    db = context.application.db

    if item_name is None or new_quantity is None or item_type is None or action is None:
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ.")
        return ConversationHandler.END

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ item_type
    table_mapping = {
        'punches': 'Punches',
        'inserts': 'Inserts',
        'stampparts': 'Parts',
        'knives': 'Knives',
        'cams': 'Clamps',
        'discparts': 'Disc_Parts',
        'pushers': 'Pushers',
    }
    table = table_mapping.get(item_type)

    if not table:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞.")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º stamp_id –ø–æ action
    stamp_id = await get_stamp_id_by_action(action)
    if not stamp_id:
        await query.message.reply_text("–®—Ç–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return ConversationHandler.END

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    try:
        await db.execute(
            f"""
            UPDATE {table} 
            SET quantity = ?, 
                last_modified = datetime('now', '+3 hours') 
            WHERE stamp_id = ? AND name = ?
            """,
            (new_quantity, stamp_id, item_name),
        )
        await db.commit()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %s", e)
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return ConversationHandler.END

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    context.user_data['changes_saved'] = True

    await query.message.reply_text(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {item_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_quantity}"
    )

    return States.CHANGE_QTY_ADJUSTING_QUANTITY  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    current_state = context.user_data.get('state')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    # –∏ –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (current_state == States.CHANGE_QTY_ADJUSTING_QUANTITY and 
        not context.user_data.get('changes_saved', False) and
        all(key in context.user_data for key in ['selected_item_name', 'current_quantity', 'new_quantity'])):

        keyboard = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data='save_and_exit')],
                [InlineKeyboardButton("–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data='exit_without_saving')],
            ]
        )
        await query.message.reply_text(
            "–£–≤–µ—Ä–µ–Ω—ã –ª–∏ –≤—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π '–ì–æ—Ç–æ–≤–æ'.",
            reply_markup=keyboard
        )
        return States.CHANGE_QTY_CONFIRM_EXIT
    else:
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—É –æ—Å—Ç–∞—Ç–∫–∞
        action = context.user_data.get('action')
        current_menu = context.user_data.get('current_menu', 'main_menu')

        if action:
            await show_balance(query, context, action, current_menu)
        else:
            keyboard = get_menu_keyboard('main_menu')
            await query.message.reply_text(menu['main_menu']['text'], reply_markup=keyboard)
        return ConversationHandler.END


async def save_and_exit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    required_data = ['selected_item_name', 'new_quantity', 'item_type', 'action']
    if not all(key in context.user_data for key in required_data):
        await query.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ.",
            reply_markup=back_to_menu_keyboard('main_menu')
        )
        return ConversationHandler.END

    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    if not context.user_data.get('changes_saved'):
        item_name = context.user_data['selected_item_name']
        new_quantity = context.user_data['new_quantity']
        item_type = context.user_data['item_type']
        action = context.user_data['action']
        db = context.application.db

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ item_type
        table_mapping = {
            'punches': 'Punches',
            'inserts': 'Inserts',
            'stampparts': 'Parts',
            'knives': 'Knives',
            'cams': 'Clamps',
            'discparts': 'Disc_Parts',
            'pushers': 'Pushers',
        }
        table = table_mapping.get(item_type)

        if not table:
            await query.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞.",
                reply_markup=back_to_menu_keyboard('main_menu')
            )
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º stamp_id –ø–æ action
        stamp_id = await get_stamp_id_by_action(action)
        if not stamp_id:
            await query.message.reply_text(
                "–®—Ç–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=back_to_menu_keyboard('main_menu')
            )
            return ConversationHandler.END

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            await db.execute(
                f"UPDATE {table} SET quantity = ? WHERE stamp_id = ? AND name = ?",
                (new_quantity, stamp_id, item_name),
            )
            await db.commit()
            await query.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %s", e)
            await query.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
                reply_markup=back_to_menu_keyboard('main_menu')
            )
            return ConversationHandler.END

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—É –æ—Å—Ç–∞—Ç–∫–∞
    action = context.user_data.get('action')
    current_menu = context.user_data.get('current_menu', 'main_menu')
    if action:
        await show_balance(query, context, action, current_menu)
    else:
        keyboard = get_menu_keyboard('main_menu')
        await query.message.reply_text(menu['main_menu']['text'], reply_markup=keyboard)
    return ConversationHandler.END

async def exit_without_saving(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–∫–∞–∑—É –æ—Å—Ç–∞—Ç–∫–∞
    action = context.user_data.get('action')
    current_menu = context.user_data.get('current_menu', 'main_menu')

    if action:
        await show_balance(query, context, action, current_menu)
    else:
        keyboard = get_menu_keyboard('main_menu')
        await query.message.reply_text(menu['main_menu']['text'], reply_markup=keyboard)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –µ–≥–æ
        await update.callback_query.answer()
        await update.callback_query.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    elif update.message:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    else:
        # –ï—Å–ª–∏ –Ω–∏ —Ç–æ–≥–æ, –Ω–∏ –¥—Ä—É–≥–æ–≥–æ –Ω–µ—Ç
        await update.effective_chat.send_message('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

async def invalid_input_in_adjusting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'."
    )
    return States.CHANGE_QTY_ADJUSTING_QUANTITY

async def invalid_input_in_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'."
    )
    return States.CHANGE_QTY_CHOOSING_ITEM

async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("unknown_message called")
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )