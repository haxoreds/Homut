import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from menu import menu
from database import get_stamp_id_by_action
from menu import process_main_menu_action
from menu import back_to_menu_keyboard

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJI = {
    'Punches': 'üî®',
    'Inserts': 'üîß',
    'Parts': '‚öôÔ∏è',
    'Knives': 'üî™',
    'Clamps': 'üóúÔ∏è',
    'Disc_Parts': 'üíø',
    'Pushers': 'üëä'
}

async def show_balance(query, context, action, current_menu):
    db = context.application.db
    logger.info(f"Action: {action}, Current Menu: {current_menu}")

    table = None
    if 'punches' in action:
        table = 'Punches'
    elif 'inserts' in action:
        table = 'Inserts'
    elif 'stampparts' in action:
        table = 'Parts'
    elif 'knives' in action:
        table = 'Knives'
    elif 'cams' in action:
        table = 'Clamps'
    elif 'discparts' in action:
        table = 'Disc_Parts'
    elif 'pushers' in action:
        table = 'Pushers'
    else:
        await query.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª.", reply_markup=back_to_menu_keyboard(current_menu)
        )
        return

    context.user_data['table'] = table
    context.user_data['current_menu'] = current_menu
    context.user_data['action'] = action

    stamp_id = await get_stamp_id_by_action(action)
    if not stamp_id:
        await query.message.reply_text(
            "–®—Ç–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_menu_keyboard(current_menu)
        )
        return

    context.user_data['stamp_id'] = stamp_id

    try:
        # –ò–∑–º–µ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        async with db.execute(
            f"""SELECT 
                id, name, quantity, type, size, image_url, description,
                datetime(createdAt, '+3 hours') as created_at,
                datetime(updatedAt, '+3 hours') as updated_at,
                datetime(last_modified, '+3 hours') as last_modified
            FROM {table} 
            WHERE stamp_id = ?""", 
            (stamp_id,)
        ) as cursor:
            rows = await cursor.fetchall()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %s", e)
        await query.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=back_to_menu_keyboard(current_menu),
        )
        return

    if not rows:
        message = "–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç."
    else:
        emoji = CATEGORY_EMOJI.get(table, 'üì¶')
        message = f"{emoji} <b>–û—Å—Ç–∞—Ç–æ–∫ –ø–æ {menu[current_menu]['text']}</b>\n\n"

        for row in rows:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
            columns = [description[0] for description in cursor.description]
            data = dict(zip(columns, row))

            message += f"<b>{data['name']}</b>\n"
            message += f"‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['quantity']}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
            for key, value in data.items():
                if key not in ['name', 'quantity', 'stamp_id', 'id']:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                    if key == 'created_at':
                        message += f"‚îî –°–æ–∑–¥–∞–Ω–æ: {value or '(–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)'}\n"
                    elif key == 'updated_at':
                        message += f"‚îî –û–±–Ω–æ–≤–ª–µ–Ω–æ: {value or '(–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)'}\n"
                    elif key == 'last_modified':
                        message += f"‚îî –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {value or '(–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)'}\n"
                    # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                    elif key == 'type':
                        message += f"‚îî –¢–∏–ø: {value or '(–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)'}\n"
                    elif key == 'size':
                        message += f"‚îî –†–∞–∑–º–µ—Ä: {value or '(–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)'}\n"
                    elif key == 'image_url':
                        message += f"‚îî –§–æ—Ç–æ: {value or '(–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)'}\n"
                    elif key == 'description':
                        message += f"‚îî –û–ø–∏—Å–∞–Ω–∏–µ: {value or '(–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)'}\n"
            message += "\n"

    change_quantity_action = action.replace('showbalance', 'changequantity')

    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=change_quantity_action)],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')],
        ]
    )

    await query.message.reply_text(
        message, 
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )