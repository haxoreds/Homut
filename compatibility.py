"""
Compatibility Module - –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –¥–µ—Ç–∞–ª–µ–π
=========================================================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è:
- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–µ—Ç–∞–ª–µ–π –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —à—Ç–∞–º–ø–∞–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
- –£–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–µ—Ç–∞–ª–µ–π –º–µ–∂–¥—É —à—Ç–∞–º–ø–∞–º–∏
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π
3. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import get_connection
from menu import back_to_menu_keyboard
from constants import States

logger = logging.getLogger(__name__)

async def show_compatibility_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –¥–µ—Ç–∞–ª–µ–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    - context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - States.COMPATIBILITY_MENU: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

    –î–µ–π—Å—Ç–≤–∏—è:
    1. –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    3. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    """
    query = update.callback_query
    await query.answer()

    # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    context.user_data.clear()
    context.user_data['menu_path'] = ['main_menu', 'compatibility_menu']

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="check_compatibility")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="add_compatibility")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="edit_compatibility")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]

    try:
        await query.message.edit_text(
            "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –¥–µ—Ç–∞–ª–µ–π:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.COMPATIBILITY_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]]
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END

async def check_compatibility(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —à—Ç–∞–º–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à—Ç–∞–º–ø–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM Stamps ORDER BY name")
    stamps = cursor.fetchall()
    conn.close()

    keyboard = []
    for stamp_id, stamp_name in stamps:
        keyboard.append([InlineKeyboardButton(
            stamp_name, 
            callback_data=f"check_stamp_{stamp_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compatibility")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ç–∞–º–ø, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.CHECKING_COMPATIBILITY

async def show_compatible_parts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞"""
    query = update.callback_query
    await query.answer()

    stamp_id = int(query.data.split('_')[2])

    conn = get_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à—Ç–∞–º–ø–µ
        cursor.execute("SELECT name FROM Stamps WHERE id = ?", (stamp_id,))
        stamp_name = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        cursor.execute("""
            SELECT 
                s.name as target_stamp,
                pc.part_type,
                pc.notes
            FROM Parts_Compatibility pc
            JOIN Stamps s ON s.id = pc.target_stamp_id
            WHERE pc.source_stamp_id = ?
            ORDER BY s.name, pc.part_type
        """, (stamp_id,))

        compatibilities = cursor.fetchall()

        if not compatibilities:
            message = f"–î–ª—è —à—Ç–∞–º–ø–∞ {stamp_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π."
        else:
            message = f"–°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —à—Ç–∞–º–ø–∞ {stamp_name}:\n\n"
            current_stamp = None
            for target_stamp, part_type, notes in compatibilities:
                if current_stamp != target_stamp:
                    message += f"\nüîπ {target_stamp}:\n"
                    current_stamp = target_stamp
                message += f"  ‚Ä¢ {part_type}"
                if notes:
                    message += f" ({notes})"
                message += "\n"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stamp_list")]]

        await query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.CHECKING_COMPATIBILITY
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stamp_list")]]
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.CHECKING_COMPATIBILITY
    finally:
        conn.close()

async def add_compatibility_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM Stamps ORDER BY name")
    stamps = cursor.fetchall()
    conn.close()

    keyboard = []
    for stamp_id, stamp_name in stamps:
        keyboard.append([InlineKeyboardButton(
            stamp_name, 
            callback_data=f"source_stamp_{stamp_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compatibility")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —à—Ç–∞–º–ø –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.ADDING_COMPATIBILITY_SOURCE

async def select_target_stamp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ —à—Ç–∞–º–ø–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    source_stamp_id = int(query.data.split('_')[2])
    context.user_data['source_stamp_id'] = source_stamp_id

    conn = get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à—Ç–∞–º–ø—ã –∫—Ä–æ–º–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
    cursor.execute("""
        SELECT id, name 
        FROM Stamps 
        WHERE id != ? 
        ORDER BY name
    """, (source_stamp_id,))
    
    stamps = cursor.fetchall()
    conn.close()

    keyboard = []
    for stamp_id, stamp_name in stamps:
        keyboard.append([InlineKeyboardButton(
            stamp_name, 
            callback_data=f"target_stamp_{stamp_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_source_selection")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ç–∞–º–ø, —Å –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –¥–µ—Ç–∞–ª–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.ADDING_COMPATIBILITY_TARGET

async def select_part_type_and_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏ –∏ —É–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()

    target_stamp_id = int(query.data.split('_')[2])
    context.user_data['target_stamp_id'] = target_stamp_id

    part_types = [
        ("–ü—É–∞–Ω—Å–æ–Ω—ã", "Punches"),
        ("–í—Å—Ç–∞–≤–∫–∏", "Inserts"),
        ("–ù–æ–∂–∏", "Knives"),
        ("–ö—É–ª–∞—á–∫–∏", "Clamps"),
        ("–ó–∞–ø—á–∞—Å—Ç–∏ –¥–∏—Å–∫–∞", "Disc_Parts"),
        ("–¢–æ–ª–∫–∞—Ç–µ–ª–∏", "Pushers"),
        ("–ó–∞–ø—á–∞—Å—Ç–∏", "Parts")
    ]

    keyboard = []
    for display_name, table_name in part_types:
        keyboard.append([InlineKeyboardButton(
            display_name, 
            callback_data=f"part_type_{table_name}"
        )])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_target_selection")])

    await query.message.edit_text(
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"
        "2. –ó–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–µ—Ç–∞–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.ADDING_COMPATIBILITY_TYPE

async def handle_part_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∏–º–µ–Ω–∏ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ –±–∞–∑–µ"""
    query = update.callback_query
    await query.answer()

    part_type = query.data.split('_')[2]
    context.user_data['part_type'] = part_type

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    table_name = part_type  # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    conn = get_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞
        source_stamp_id = context.user_data.get('source_stamp_id')
        cursor.execute(f"""
            SELECT id, name, size, description 
            FROM {table_name} 
            WHERE stamp_id = ?
            ORDER BY name
        """, (source_stamp_id,))

        parts = cursor.fetchall()

        if not parts:
            await query.message.edit_text(
                f"‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π —Ç–∏–ø–∞ '{table_name}' –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞.\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —à—Ç–∞–º–ø–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_type_selection")
                ]])
            )
            return States.ADDING_COMPATIBILITY_TYPE

        keyboard = []
        for part_id, name, size, description in parts:
            display_text = name
            if size:
                display_text += f" ({size})"
            if description:
                display_text += f" - {description}"
            keyboard.append([InlineKeyboardButton(
                display_text,
                callback_data=f"select_part_{name}"
            )])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_type_selection")])

        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–µ—Ç–∞–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.ADDING_COMPATIBILITY_NAME
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π: {e}")
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_type_selection")
            ]])
        )
        return States.ADDING_COMPATIBILITY_TYPE
    finally:
        conn.close()

async def handle_part_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–µ—Ç–∞–ª–∏"""
    query = update.callback_query
    await query.answer()

    part_name = query.data.split('_', 2)[2]  # select_part_NAME -> NAME
    context.user_data['part_name'] = part_name

    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_notes")]]

    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.ADDING_COMPATIBILITY_NOTES

async def select_part_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π"""
    query = update.callback_query
    await query.answer()

    target_stamp_id = int(query.data.split('_')[2])
    context.user_data['target_stamp_id'] = target_stamp_id

    part_types = [
        ("–ü—É–∞–Ω—Å–æ–Ω—ã", "punches"),
        ("–í—Å—Ç–∞–≤–∫–∏", "inserts"),
        ("–ù–æ–∂–∏", "knives"),
        ("–ö—É–ª–∞—á–∫–∏", "cams"),
        ("–î–∏—Å–∫–∏", "discs"),
        ("–ó–∞–ø—á–∞—Å—Ç–∏ –¥–∏—Å–∫–∞", "discparts"),
        ("–¢–æ–ª–∫–∞—Ç–µ–ª–∏", "pushers"),
        ("–ó–∞–ø—á–∞—Å—Ç–∏", "parts")
    ]

    keyboard = []
    for display_name, type_id in part_types:
        keyboard.append([InlineKeyboardButton(
            display_name, 
            callback_data=f"part_type_{type_id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_target_selection")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.ADDING_COMPATIBILITY_TYPE

async def add_compatibility_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    part_type = query.data.split('_')[2]
    context.user_data['part_type'] = part_type

    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_notes")]]

    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.ADDING_COMPATIBILITY_NOTES

async def save_compatibility(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if update.callback_query and update.callback_query.data == "skip_notes":
        await update.callback_query.answer()
        notes = None
    elif update.message:
        notes = update.message.text

    source_stamp_id = context.user_data['source_stamp_id']
    target_stamp_id = context.user_data['target_stamp_id']
    part_type = context.user_data['part_type']
    part_name = context.user_data.get('part_name', '')

    conn = get_connection()
    cursor = conn.cursor()

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏ —Å –∏–º–µ–Ω–µ–º
        full_part_type = f"{part_type} - {part_name}" if part_name else part_type

        cursor.execute("""
            INSERT INTO Parts_Compatibility 
            (source_stamp_id, target_stamp_id, part_type, notes) 
            VALUES (?, ?, ?, ?)
        """, (source_stamp_id, target_stamp_id, full_part_type, notes))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        cursor.execute("""
            INSERT INTO Parts_Compatibility 
            (source_stamp_id, target_stamp_id, part_type, notes) 
            VALUES (?, ?, ?, ?)
        """, (target_stamp_id, source_stamp_id, full_part_type, notes))

        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —à—Ç–∞–º–ø–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor.execute("SELECT name FROM Stamps WHERE id IN (?, ?)", 
                      (source_stamp_id, target_stamp_id))
        stamps = cursor.fetchall()
        source_stamp_name = stamps[0][0]
        target_stamp_name = stamps[1][0]

        message = (f"‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                  f"–®—Ç–∞–º–ø—ã: {source_stamp_name} ‚ü∑ {target_stamp_name}\n"
                  f"–¢–∏–ø –¥–µ—Ç–∞–ª–∏: {full_part_type}")

        if notes:
            message += f"\n–ó–∞–º–µ—Ç–∫–∏: {notes}"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."
        conn.rollback()
    finally:
        conn.close()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]]

    if update.callback_query:
        await update.callback_query.message.edit_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    return ConversationHandler.END

async def edit_compatibility_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    conn = get_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏
        cursor.execute("""
            SELECT DISTINCT 
                pc1.id,
                s1.name as source_stamp,
                s2.name as target_stamp,
                pc1.part_type,
                pc1.notes
            FROM Parts_Compatibility pc1
            JOIN Stamps s1 ON s1.id = pc1.source_stamp_id
            JOIN Stamps s2 ON s2.id = pc1.target_stamp_id
            WHERE NOT EXISTS (
                SELECT 1 
                FROM Parts_Compatibility pc2
                WHERE pc2.source_stamp_id = pc1.target_stamp_id
                AND pc2.target_stamp_id = pc1.source_stamp_id
                AND pc2.id < pc1.id
            )
            ORDER BY s1.name, s2.name, pc1.part_type
        """)

        compatibilities = cursor.fetchall()

        if not compatibilities:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compatibility")]]
            await query.message.edit_text(
                "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return States.COMPATIBILITY_MENU

        keyboard = []
        for comp_id, source, target, part_type, notes in compatibilities:
            display_text = f"{source} ‚Üî {target}: {part_type}"
            if notes:
                display_text += f" ({notes})"
            keyboard.append([InlineKeyboardButton(
                display_text,
                callback_data=f"edit_compat_{comp_id}"
            )])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compatibility")])

        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.EDITING_COMPATIBILITY_CHOOSING

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–µ–π: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compatibility")]]
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–µ–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.COMPATIBILITY_MENU
    finally:
        conn.close()

async def handle_edit_compatibility_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    comp_id = int(query.data.split('_')[2])
    context.user_data['editing_compatibility_id'] = comp_id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT pc.part_type, pc.notes,
               s1.name as source_stamp,
               s2.name as target_stamp
        FROM Parts_Compatibility pc
        JOIN Stamps s1 ON s1.id = pc.source_stamp_id
        JOIN Stamps s2 ON s2.id = pc.target_stamp_id
        WHERE pc.id = ?
    """, (comp_id,))

    compatibility = cursor.fetchone()
    conn.close()

    if not compatibility:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compat_list")
            ]])
        )
        return States.COMPATIBILITY_MENU

    part_type, notes, source_stamp, target_stamp = compatibility
    message = (f"–¢–µ–∫—É—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:\n"
              f"–®—Ç–∞–º–ø—ã: {source_stamp} ‚Üî {target_stamp}\n"
              f"–¢–∏–ø –¥–µ—Ç–∞–ª–∏: {part_type}\n")
    if notes:
        message += f"–ó–∞–º–µ—Ç–∫–∏: {notes}\n"

    message += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = [
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="edit_compat_notes")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="delete_compat")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compat_list")]
    ]

    await query.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.EDITING_COMPATIBILITY_ACTION

async def handle_edit_compatibility_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    comp_id = context.user_data.get('editing_compatibility_id')
    if not comp_id:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compat_list")
            ]])
        )
        return States.COMPATIBILITY_MENU

    conn = get_connection()
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        cursor.execute("""
            SELECT 
                s1.name, s2.name, pc.part_type,
                pc.source_stamp_id, pc.target_stamp_id
            FROM Parts_Compatibility pc
            JOIN Stamps s1 ON s1.id = pc.source_stamp_id
            JOIN Stamps s2 ON s2.id = pc.target_stamp_id
            WHERE pc.id = ?
        """, (comp_id,))
        compatibility = cursor.fetchone()

        if compatibility:
            source_stamp, target_stamp, part_type, source_id, target_id = compatibility

            # –£–¥–∞–ª—è–µ–º –ø—Ä—è–º—É—é –∏ –æ–±—Ä–∞—Ç–Ω—É—é –∑–∞–ø–∏—Å–∏ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            cursor.execute("""
                DELETE FROM Parts_Compatibility 
                WHERE (source_stamp_id = ? AND target_stamp_id = ?) 
                OR (source_stamp_id = ? AND target_stamp_id = ?)
            """, (source_id, target_id, target_id, source_id))

            conn.commit()

            message = (f"‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:\n"
                      f"–®—Ç–∞–º–ø—ã: {source_stamp} ‚Üî {target_stamp}\n"
                      f"–¢–∏–ø –¥–µ—Ç–∞–ª–∏: {part_type}")
        else:
            message = "‚ùå –û—à–∏–±–∫–∞: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."
        conn.rollback()

    finally:
        conn.close()

    keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_compatibility")]]
    await query.message.edit_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    return States.COMPATIBILITY_MENU

async def handle_edit_compatibility_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    comp_id = context.user_data.get('editing_compatibility_id')
    if not comp_id:
        await query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compat_list")
            ]])
        )
        return States.COMPATIBILITY_MENU

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compat_list")]]
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['editing_notes'] = True
    return States.ADDING_COMPATIBILITY_NOTES

async def save_edited_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫"""
    if not update.message:
        return States.COMPATIBILITY_MENU

    comp_id = context.user_data.get('editing_compatibility_id')
    new_notes = update.message.text

    conn = get_connection()
    cursor = conn.cursor()

    try:
        cursor.execute("""
            UPDATE Parts_Compatibility 
            SET notes = ?, updatedAt = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (new_notes, comp_id))
        conn.commit()
        message = "‚úÖ –ó–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫: {e}")
        message = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫."
    finally:
        conn.close()

    keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_compatibility")]]
    await update.message.reply_text(message, reply_markup=InlineKeyboardMarkup(keyboard))
    return States.COMPATIBILITY_MENU

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_to_compatibility_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        context.user_data['menu_path'] = ['main_menu', 'compatibility_menu']

        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="check_compatibility")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="add_compatibility")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", callback_data="edit_compatibility")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]
        ]

        await query.message.edit_text(
            "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –¥–µ—Ç–∞–ª–µ–π:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return States.COMPATIBILITY_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}", exc_info=True)
        try:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back")]]
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as reply_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {reply_error}", exc_info=True)
        return ConversationHandler.END

async def back_to_stamp_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —à—Ç–∞–º–ø–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for key in ['editing_compatibility_id', 'editing_notes', 'source_stamp_id', 'target_stamp_id', 'part_type', 'part_name']:
        if key in context.user_data:
            del context.user_data[key]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —à—Ç–∞–º–ø–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id, name FROM Stamps ORDER BY name")
    stamps = cursor.fetchall()
    conn.close()

    keyboard = []
    for stamp_id, stamp_name in stamps:
        keyboard.append([InlineKeyboardButton(
            stamp_name, 
            callback_data=f"check_stamp_{stamp_id}"
        )])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_compatibility")])

    await query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —à—Ç–∞–º–ø, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return States.CHECKING_COMPATIBILITY

async def back_to_source_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —à—Ç–∞–º–ø–∞"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫—Ä–æ–º–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    for key in ['target_stamp_id', 'part_type', 'part_name']:
        if key in context.user_data:
            del context.user_data[key]
    return await add_compatibility_start(update, context)

async def back_to_target_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ —à—Ç–∞–º–ø–∞"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è source_stamp_id
    for key in ['part_type', 'part_name']:
        if key in context.user_data:
            del context.user_data[key]
    return await select_target_stamp(update, context)

async def back_to_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–µ—Ç–∞–ª–∏"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è stamp_ids
    if 'part_name' in context.user_data:
        del context.user_data['part_name']
    return await select_part_type_and_name(update, context)

async def back_to_compat_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–µ–π"""
    # –û—á–∏—â–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    for key in ['editing_compatibility_id', 'editing_notes']:
        if key in context.user_data:
            del context.user_data[key]
    return await edit_compatibility_start(update, context)